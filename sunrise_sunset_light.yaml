blueprint:
  name: Sunrise and Sunset Automation
  description: |
    Automate your home lighting or scenes based on the sun's elevation.
    - Set elevation thresholds to trigger actions at sunrise and sunset.
    - Provide either a light or scenes; scenes override light control.

    **Important**: 
    - Either a light entity or scenes must be specified.
    - If both are provided, scenes take priority.
    - The automation logs a warning if neither are specified.

  domain: automation
  input:
    trigger_at_startup:
      name: Trigger at Startup
      description: Trigger actions at startup if conditions are met.
      default: true
      selector:
        boolean:

    sunrise_elevation_shift:
      name: Sunrise Elevation Shift
      description: Threshold for sunrise actions (-6° to 6°).
      default: -1.5
      selector:
        number:
          min: -6
          max: 6
          unit_of_measurement: "°"

    sunset_elevation_shift:
      name: Sunset Elevation Shift
      description: Threshold for sunset actions (-6° to 6°).
      default: -2
      selector:
        number:
          min: -6
          max: 6
          unit_of_measurement: "°"

    target_light:
      name: Target Light
      description: The light to control if no scenes are provided.
      selector:
        entity:
          domain: light
      default: null  # Make it optional by default

    sunrise_scene:
      name: Sunrise Scene
      description: The scene to activate at sunrise. Takes priority over light control.
      selector:
        entity:
          domain: scene
      default: null  # Make it optional by default

    sunset_scene:
      name: Sunset Scene
      description: The scene to activate at sunset. Takes priority over light control.
      selector:
        entity:
          domain: scene
      default: null  # Make it optional by default

variables:
  trigger_at_startup: !input trigger_at_startup
  sunrise_elevation_shift: !input sunrise_elevation_shift
  sunset_elevation_shift: !input sunset_elevation_shift
  target_light: !input target_light
  sunrise_scene: !input sunrise_scene
  sunset_scene: !input sunset_scene

trigger:
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    above: 0
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    below: 0
  - platform: homeassistant
    event: start

condition:
  - condition: template
    value_template: >-
      {% if not target_light and not sunrise_scene and not sunset_scene %}
      {{ log('Warning: No light or scene specified! Automation will not perform any action.') }}
      {% endif %}

  - condition: or
    conditions:
      # Sunrise condition
      - condition: and
        conditions:
          - condition: state
            entity_id: sun.sun
            attribute: rising
            state: 'true'
          - condition: template
            value_template: >-
              {{ trigger.platform != "homeassistant" or 
                 (trigger_at_startup and state_attr("sun.sun", "elevation") >= sunrise_elevation_shift) }}
      # Sunset condition
      - condition: and
        conditions:
          - condition: state
            entity_id: sun.sun
            attribute: rising
            state: 'false'
          - condition: template
            value_template: >-
              {{ trigger.platform != "homeassistant" or 
                 (trigger_at_startup and state_attr("sun.sun", "elevation") <= sunset_elevation_shift) }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ sunrise_scene is not none }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: "{{ sunrise_scene }}"
      - conditions:
          - condition: template
            value_template: "{{ sunset_scene is not none }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: "{{ sunset_scene }}"
      - conditions:
          - condition: template
            value_template: "{{ target_light is not none and sunrise_scene is none and sunset_scene is none }}"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: sun.sun
                    attribute: rising
                    state: 'true'
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ target_light }}"
              - conditions:
                  - condition: state
                    entity_id: sun.sun
                    attribute: rising
                    state: 'false'
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ target_light }}"
    default: []

mode: single